require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { PrismaClient } = require('@prisma/client');

const bot = new TelegramBot(process.env.BOT_TOKEN);
const prisma = new PrismaClient();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart(chatId) {
  const welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.';
  
  const keyboard = {
    inline_keyboard: [
      [{ text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url: 'https://t.me/WeAiBot_bot/WeAi' }]
    ]
  };
  
  await bot.sendMessage(chatId, welcomeMessage, {
    reply_markup: JSON.stringify(keyboard)
  });
}

// –§—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendDailyMessage() {
  const message = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥!üíµ';
  const keyboard = {
    inline_keyboard: [
      [{ text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url: 'https://t.me/WeAiBot_bot/WeAi' }]
    ]
  };

  const failedDeliveries = [];

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const users = await prisma.user.findMany({
      select: {
        telegramId: true
      }
    });

    for (const user of users) {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ message_id
        const sentMessage = await bot.sendMessage(user.telegramId, message, {
          reply_markup: JSON.stringify(keyboard)
        });

        // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const previousMessageId = sentMessage.message_id - 1;
        await bot.deleteMessage(user.telegramId, previousMessageId);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, error.message);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–º–µ—á–∞–µ–º —ç—Ç–æ –≤ –ª–æ–≥–∞—Ö
        if (error.code === 'ETELEGRAM' && 
           (error.response.body.error_code === 403 || error.response.body.error_code === 400)) {
          console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramId} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        }
        
        failedDeliveries.push({
          chatId: user.telegramId,
          error: error.message
        });
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
      - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}
      - –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: ${failedDeliveries.length}
    `);

    if (failedDeliveries.length > 0) {
      console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:', JSON.stringify(failedDeliveries, null, 2));
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    throw error;
  }
}

module.exports = async (req, res) => {
  if (req.method === 'POST') {
    const { body } = req;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (body.message && body.message.text === '/start') {
      await handleStart(body.message.chat.id);
      res.status(200).send('OK');
      return;
    }
    
    // –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏
    if (body.cronToken === process.env.CRON_SECRET) {
      console.log('–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ cron-job.org');
      await sendDailyMessage();
      res.status(200).send('–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      return;
    }
    
    res.status(400).send('–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
  } else {
    res.status(200).send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }
};
